#   Copyright (c) 2021. Tocenomiczs

import asyncio
import json
import random
import re
import string
from datetime import datetime, timezone, timedelta
from threading import Thread
from time import sleep

from telebot import TeleBot, types

import config
import keyboards as kbs
from banker import Banker
from databases import Database
from mailing_core import start_mailings
from qiwi import Qiwi
from qiwi_withdraw import QiwiWithdraw

app = TeleBot(config.token, parse_mode="HTML")
qiwi = Qiwi(config.qiwi_secret_token)
qiwi_withdraw = QiwiWithdraw(config.qiwi_withdraw_token)
checking_banker = False

Thread(target=start_mailings, args=()).start()


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "back")
def back(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    db.status()
    if query.message.content_type == "photo":
        app.edit_message_caption("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", query.message.chat.id, query.message.id,
                                 reply_markup=kbs.main_kb)
    elif query.message.content_type == "text":
        app.send_message(from_id, "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ", reply_markup=kbs.main_kb)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "delete")
def delete(query):
    app.answer_callback_query(query.id, show_alert=False)
    app.delete_message(query.message.chat.id, query.message.id)


@app.message_handler(regexp=r"^üñ• –ü—Ä–æ—Ñ–∏–ª—å$")
def cabinet(message):
    from_id = message.from_user.id
    db = Database(from_id, app)
    user = db.get_me()
    deals_count = db.get_deals_count()
    deals_sum = db.get_deals_sum()
    text = f"üÜî –í–∞—à id: {from_id}\n\n" \
           f"üí∞ –ë–∞–ª–∞–Ω—Å: {user['balance']} RUB\n" \
           f"‚ôªÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {deals_count}\n" \
           f"üí≥ –°—É–º–º–∞ —Å–¥–µ–ª–æ–∫: {deals_sum} RUB\n" \
           f"üìä –†–µ–π—Ç–∏–Ω–≥: {user['rating']}"
    app.send_message(from_id, text, reply_markup=kbs.cabinet_inline)


@app.message_handler(regexp=r"^ü§ù –°–¥–µ–ª–∫–∏$")
def my_deals(message):
    from_id = message.from_user.id
    db = Database(from_id, app)
    deals = db.get_deals()
    kb = types.InlineKeyboardMarkup()
    for deal in deals:
        kb.add(types.InlineKeyboardButton(f"–°–¥–µ–ª–∫–∞ #{deal['id']}", callback_data=json.dumps({
            "action": "about_deal",
            "deal_id": deal['id']
        })))
    kb.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=json.dumps({"action": "back"})))
    app.send_message(from_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É", reply_markup=kb)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "admin_active_deals")
def admin_active_deals(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    if from_id not in config.admins:
        return
    db = Database(from_id, app)
    deals = db.get_active_deals()
    kb = types.InlineKeyboardMarkup()
    for deal in deals:
        kb.add(types.InlineKeyboardButton(f"–°–¥–µ–ª–∫–∞ #{deal['id']}", callback_data=json.dumps({
            "action": "admin_about_deal",
            "deal_id": deal['id']
        })))
    kb.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=json.dumps({"action": "admin_back"})))
    app.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ —Å–¥–µ–ª–∫—É", query.message.chat.id, query.message.id, reply_markup=kb)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "admin_about_deal")
def admin_about_deal(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    if from_id not in config.admins:
        return
    db = Database(from_id, app)
    deal_id = json.loads(query.data).get("deal_id")
    deal = db.get_deal(deal_id)
    buyer = Database(deal['buyer'], app).get_me()
    seller = Database(deal['seller'], app).get_me()
    if deal['status'] == "waiting_seller":
        deal_status = "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞"
    elif deal['status'] == "waiting_for_pay":
        deal_status = "–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º"
    elif deal['status'] == "waiting_goods_transfer":
        deal_status = "–û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º"
    elif deal['status'] == "arbitrage":
        deal_status = "–ê—Ä–±–∏—Ç—Ä–∞–∂"
    elif deal['status'] == "closed_arbitrage":
        deal_status = "–ó–∞–∫—Ä—ã—Ç–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–º"
    elif deal['status'] == "closed":
        deal_status = "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
    elif deal['status'] == "canceled":
        deal_status = "–û—Ç–º–µ–Ω–µ–Ω–∞"
    else:
        deal_status = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    deal_message = f"üî∞ –°–¥–µ–ª–∫–∞: #{deal_id}\n\n" \
                   f"‚ûñ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{buyer['username']}\n\n" \
                   f"‚ûñ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller['username']}\n\n" \
                   f"üí∞ –°—É–º–º–∞: {deal['sum']} RUB\n\n" \
                   f"üìù –£—Å–ª–æ–≤–∏—è: {deal['info']}\n\n" \
                   f"‚ôªÔ∏è –°—Ç–∞—Ç—É—Å: {deal_status}"
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–°–æ–æ–±—â–µ–Ω–∏—è —Å–¥–µ–ª–∫–∏",
                                      callback_data=json.dumps({"action": "deal_messages", "deal_id": deal_id})))
    if deal['status'] == "waiting_goods_transfer":
        kb.add(types.InlineKeyboardButton("–í–µ—Ä–Ω—É—Ç—å –¥–µ–Ω—å–≥–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—é", callback_data=json.dumps(
            {"action": "admin_cancel_deal", "deal_id": deal_id})))
    kb.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=json.dumps({"action": "admin_back"})))
    app.edit_message_text(deal_message, query.message.chat.id, query.message.id, reply_markup=kb)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "admin_cancel_deal")
def admin_cancel_deal(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    if from_id not in config.admins:
        return
    db = Database(from_id, app)
    deal_id = json.loads(query.data).get("deal_id")
    deal = db.get_deal(deal_id)
    if deal['status'] != "waiting_goods_transfer":
        app.answer_callback_query(query.id, text="–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–º–µ–Ω–∏—Ç—å —Å–¥–µ–ª–∫—É")
        return
    buyer_db = Database(deal['buyer'], app)
    buyer_db.change_balance(deal['sum'])
    db.set_deal_status(deal_id, "canceled")
    message = f"–°–¥–µ–ª–∫–∞ #{deal_id} –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –¥–µ–Ω—å–≥–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—é"
    app.edit_message_text(f"–°–¥–µ–ª–∫–∞ #{deal_id} –æ—Ç–º–µ–Ω–µ–Ω–∞", query.message.chat.id, query.message.id)
    app.send_message(deal['buyer'], message)
    app.send_message(deal['seller'], message)
    buyer = db.find_user(deal['buyer'])
    seller = db.find_user(deal['seller'])
    app.send_message(config.notifications_channel, f"üî∞ –°–¥–µ–ª–∫–∞: #{deal_id}\n\n"
                                                   f"‚ûñ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{buyer['username']}\n\n"
                                                   f"‚ûñ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller['username']}\n\n"
                                                   f"üí∞ –°—É–º–º–∞: {deal['sum']} RUB\n\n"
                                                   "‚ôªÔ∏è –°—Ç–∞—Ç—É—Å: –û—Ç–º–µ–Ω–µ–Ω–æ")


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "deal_messages")
def deal_messages(query):
    from_id = query.from_user.id
    if from_id not in config.admins:
        return
    db = Database(from_id, app)
    deal_id = json.loads(query.data).get("deal_id")
    messages = db.get_deal_messages(deal_id)
    if len(messages) == 0:
        app.answer_callback_query(query.id, "–ù–µ—Ç—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Å–¥–µ–ª–∫–µ")
        return
    users = {}
    message = ""
    for msg in messages:
        if users.get(msg['user_id']) is None:
            user = db.find_user(user_id=msg['user_id'])
            users[msg['user_id']] = user['username']
        message += f"{users[msg['user_id']]}: {msg['message']}\n"
    app.answer_callback_query(query.id)
    app.edit_message_text(message, query.message.chat.id, query.message.id, reply_markup=kbs.admin_back, parse_mode="")


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "mailing")
def create_mailing(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    if from_id not in config.admins:
        return
    db.temp()
    db.mailing_photo()
    db.status("mailing_text")
    app.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ", query.message.chat.id, query.message.id,
                          reply_markup=kbs.admin_back)


@app.callback_query_handler(func=lambda query: json.loads(query.data)['action'] == "test_mailing")
def test_mailing(query):
    app.answer_callback_query(query.id, show_alert=False)
    from_id = query.from_user.id
    db = Database(from_id, app)
    if from_id not in config.admins:
        return
    mailing_id = json.loads(query.data)['id']
    mailing = db.get_mailing(mailing_id)
    if mailing is None:
        return
    if mailing['photo_id'] is None:
        app.send_message(from_id, mailing['mailing_text'], reply_markup=kbs.inline_delete)
    else:
        attachment = mailing['photo_id'].split("|")
        if attachment[0] == "PHOTO":
            app.send_photo(from_id, attachment[1], mailing['mailing_text'],
                           reply_markup=kbs.inline_delete)
        elif attachment[0] == "VIDEO":
            app.send_video(from_id, attachment[1], caption=mailing['mailing_text'],
                           reply_markup=kbs.inline_delete)
        elif attachment[0] == "DOCUMENT":
            app.send_document(from_id, attachment[1], caption=mailing['mailing_text'],
                              reply_markup=kbs.inline_delete)
        elif attachment[0] == "ANIMATION":
            app.send_animation(from_id, attachment[1], caption=mailing['mailing_text'],
                               reply_markup=kbs.inline_delete)


@app.callback_query_handler(func=lambda query: json.loads(query.data)['action'] == "confirm_mailing")
def confirm_mailing(query):
    app.answer_callback_query(query.id, show_alert=False)
    from_id = query.from_user.id
    db = Database(from_id, app)
    if from_id not in config.admins:
        return
    mailing_id = json.loads(query.data)['id']
    mailing = db.get_mailing(mailing_id)
    if mailing is None:
        return
    db.confirm_mailing(mailing_id)
    if query.message.content_type == "text":
        app.edit_message_text(f"–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –µ—ë id: {mailing_id}", query.message.chat.id,
                              query.message.id)
    else:
        app.edit_message_caption(f"–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞, –µ—ë id: {mailing_id}", query.message.chat.id,
                                 query.message.id)


@app.callback_query_handler(func=lambda query: json.loads(query.data)['action'] == "cancel_mailing")
def cancel_mailing(query):
    app.answer_callback_query(query.id, show_alert=False)
    from_id = query.from_user.id
    db = Database(from_id, app)
    if from_id not in config.admins:
        return
    mailing_id = json.loads(query.data)['id']
    mailing = db.get_mailing(mailing_id)
    if mailing is None:
        return
    if mailing['confirmed']:
        if query.message.content_type == "text":
            app.edit_message_text("–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", query.message.chat.id, query.message.id)
        else:
            app.edit_message_caption("–†–∞—Å—Å—ã–ª–∫–∞ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞", query.message.chat.id, query.message.id)
    db.delete_mailing(mailing_id)
    if query.message.content_type == "text":
        app.edit_message_text("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", query.message.chat.id, query.message.id)
    else:
        app.edit_message_caption("–†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞", query.message.chat.id, query.message.id)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "about_deal")
def about_deal(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    deal_id = json.loads(query.data).get("deal_id")
    deal = db.get_deal(deal_id)
    if deal['buyer'] != from_id and deal['seller'] != from_id:
        return
    buyer = Database(deal['buyer'], app).get_me()
    seller = Database(deal['seller'], app).get_me()
    if deal['status'] == "waiting_seller":
        deal_status = "–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø—Ä–æ–¥–∞–≤—Ü–∞"
    elif deal['status'] == "waiting_for_pay":
        deal_status = "–û–∂–∏–¥–∞–Ω–∏–µ –æ–ø–ª–∞—Ç—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º"
    elif deal['status'] == "waiting_goods_transfer":
        deal_status = "–û–∂–∏–¥–∞–Ω–∏–µ –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –ø—Ä–æ–¥–∞–≤—Ü–æ–º"
    elif deal['status'] == "arbitrage":
        deal_status = "–ê—Ä–±–∏—Ç—Ä–∞–∂"
    elif deal['status'] == "closed_arbitrage":
        deal_status = "–ó–∞–∫—Ä—ã—Ç–æ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–º"
    elif deal['status'] == "closed":
        deal_status = "–ó–∞–≤–µ—Ä—à–µ–Ω–∞"
    elif deal['status'] == "canceled":
        deal_status = "–û—Ç–º–µ–Ω–µ–Ω–∞"
    else:
        deal_status = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    deal_message = f"üî∞ –°–¥–µ–ª–∫–∞: #{deal_id}\n\n" \
                   f"‚ûñ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{buyer['username']}\n\n" \
                   f"‚ûñ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller['username']}\n\n" \
                   f"üí∞ –°—É–º–º–∞: {deal['sum']} RUB\n\n" \
                   f"üìù –£—Å–ª–æ–≤–∏—è: {deal['info']}\n\n" \
                   f"‚ôªÔ∏è –°—Ç–∞—Ç—É—Å: {deal_status}"
    kb = types.InlineKeyboardMarkup()
    if deal['status'] == "waiting_for_pay" and from_id == deal['buyer']:
        kb.add(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data=json.dumps({
            "action": "pay_deal",
            "deal_id": deal_id
        })))
    if deal['status'] == "waiting_goods_transfer" and from_id == deal['buyer']:
        kb.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É —Ç–æ–≤–∞—Ä–∞", callback_data=json.dumps({
            "action": "close_deal",
            "deal_id": deal_id
        })))
    if deal['status'] == "waiting_goods_transfer":
        kb.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–¥–µ–ª–∫—É –≤ –∞—Ä–±–∏—Ç—Ä–∞–∂", callback_data=json.dumps({
            "action": "deal_arbitrage",
            "deal_id": deal_id
        })))
    kb.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=json.dumps({"action": "back"})))
    app.edit_message_text(deal_message, query.message.chat.id, query.message.id, reply_markup=kb)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "deposit")
def deposit(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    db.status("deposit_sum")
    app.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è", query.message.chat.id, query.message.id,
                          reply_markup=kbs.back_inline)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "withdraw")
def withdraw(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    db.status("withdraw_sum")
    fee = json.loads(open("settings.json", "r").read())['withdraw_fee']
    app.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤—ã–≤–æ–¥–∞\n"
                          f"–ù–∞ –≤—ã–≤–æ–¥ –¥–µ–π—Å—Ç–≤—É–µ—Ç –∫–æ–º–∏—Å—Å–∏—è {fee}%", query.message.chat.id, query.message.id,
                          reply_markup=kbs.back_inline)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "admin_contact")
def admin_contact(query):
    app.answer_callback_query(query.id)
    app.edit_message_text(f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–≤—è–∑–∏: {config.admin_contact}", query.message.chat.id,
                          query.message.id, reply_markup=kbs.back_inline)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "admin_back")
def admin_back(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    if from_id not in config.admins:
        return
    db.status()
    app.edit_message_text("–ê–¥–º–∏–Ω –º–µ–Ω—é", query.message.chat.id, query.message.id, reply_markup=kbs.admin_inline)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "add_ad_button")
def add_ad_button(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    if from_id not in config.admins:
        return
    db.status("ad_button_text")
    app.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–Ω–æ–ø–∫–∏", query.message.chat.id, query.message.id,
                          reply_markup=kbs.admin_back)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "remove_ad_button")
def remove_ad_button(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    data = json.loads(query.data)
    if from_id not in config.admins:
        return
    if data.get("id") is None:
        ads = db.get_ads()
        kb = types.InlineKeyboardMarkup()
        for ad in ads:
            kb.add(types.InlineKeyboardButton(ad['button_name'], callback_data=json.dumps({
                "action": "remove_ad_button",
                "id": ad['id']
            })))
        kb.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=json.dumps({"action": "admin_back"})))
        app.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", query.message.chat.id, query.message.id,
                              reply_markup=kb)
    else:
        db.remove_ad_button(data['id'])
        app.edit_message_text("–í—ã —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–∏–ª–∏ —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–Ω–æ–ø–∫—É", query.message.chat.id, query.message.id,
                              reply_markup=kbs.admin_inline)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "edit_ad_button")
def edit_ad_button(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    data = json.loads(query.data)
    if from_id not in config.admins:
        return
    if data.get("id") is None:
        ads = db.get_ads()
        kb = types.InlineKeyboardMarkup()
        for ad in ads:
            kb.add(types.InlineKeyboardButton(ad['button_text'], callback_data=json.dumps({
                "action": "edit_ad_button",
                "id": ad['id']
            })))
        kb.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=json.dumps({"action": "admin_back"})))
        app.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–æ–ø–∫—É", query.message.chat.id, query.message.id,
                              reply_markup=kb.to_json())
    else:
        db.temp(data['id'])
        db.status("edit_button")
        app.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–Ω–æ–ø–∫–∏", query.message.chat.id, query.message.id,
                              reply_markup=kbs.admin_back)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "withdraw_fee")
def withdraw_fee(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    if from_id not in config.admins:
        return
    db.status("withdraw_fee")
    app.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –∫–æ–º–∏—Å—Å–∏—é", query.message.chat.id, query.message.id,
                          reply_markup=kbs.admin_back)


@app.message_handler(regexp=r"^üåê –û –±–æ—Ç–µ$")
def information(message):
    app.send_message(message.from_user.id, config.information, reply_markup=kbs.back_inline)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "open_deal")
def open_deal(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    seller_id = json.loads(query.data)['user_id']
    seller = db.find_user(user_id=seller_id)
    if seller is None or seller_id == from_id:
        return
    db.status(f"deal_sum__{seller_id}")
    app.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Å–¥–µ–ª–∫–∏ –≤ RUB", query.message.chat.id, query.message.id,
                          reply_markup=kbs.back_inline)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "deposit_type")
def deposit_type(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    user = db.get_me()
    payment_type = json.loads(query.data)['type']
    if payment_type not in ['qiwi', 'btc']:
        return
    payment_id = "-".join(
        ["".join([random.choice(string.ascii_letters + string.digits) for _ in range(4)]) for _ in range(3)])
    try:
        payment_sum = int(user['temp_field'])
    except ValueError:
        return
    if payment_type == "qiwi":
        db.add_payment(payment_id, payment_sum, "qiwi")
        bill_url = qiwi.generate_bill(payment_sum, payment_id)
        if not bill_url:
            app.edit_message_text("–ü—Ä–æ–∏–∑–æ—à–ª–æ –æ—à–∏–±–∫–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ —Å–Ω–æ–≤–∞", query.message.chat.id, query.message.id)
            return
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–û–ø–ª–∞—Ç–∏—Ç—å", url=bill_url))
        kb.add(types.InlineKeyboardButton("–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –æ–ø–ª–∞—Ç—É", callback_data=json.dumps({
            "action": "check_qiwi",
            "payment_id": payment_id
        })))
        kb.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=json.dumps({
            "action": "cancel_payment",
            "payment_id": payment_id
        })))
        app.edit_message_text("–°—á—ë—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω", query.message.chat.id, query.message.id, reply_markup=kb)
    elif payment_type == "btc":
        db.add_payment(payment_id, payment_sum, "banker")
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data=json.dumps({
            "action": "cancel_payment",
            "payment_id": payment_id
        })))
        db.status(f"waiting_btc__{payment_id}")
        app.edit_message_text("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —á–µ–∫ BTC Banker –≤ —ç—Ç–æ—Ç —á–∞—Ç\n"
                              "–ö—É—Ä—Å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å Binance\n\n"
                              "–ù–∞—à —Å–µ—Ä–≤–∏—Å –Ω–µ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç —Å–æ—Ö—Ä–∞–Ω–Ω–æ—Å—Ç—å –¥–µ–Ω–µ–≥ –ø—Ä–∏ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞ —ç—Ç–∏–º —Å–ø–æ—Å–æ–±–æ–º –≤ "
                              "—Å–≤—è–∑–∏ —Å —á–∞—Å—Ç–æ–π –±–ª–æ–∫–∏—Ä–æ–≤–∫–æ–π –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –±–∞–Ω–∫–∏—Ä–∞", query.message.chat.id, query.message.id,
                              reply_markup=kb)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "withdraw_type")
def withdraw_type(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    user = db.get_me()
    payment_type = json.loads(query.data)['type']
    if payment_type not in ['qiwi', 'btc']:
        return
    payment_sum = int(user['temp_field'])
    if payment_sum > user['balance']:
        return
    if payment_type == "btc":
        db.change_balance(-payment_sum)
        app.edit_message_text(
            f"–ó–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–≤–æ–¥ {payment_sum} RUB —É—Å–ø–µ—à–Ω–æ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∞, –æ–∂–∏–¥–∞–π—Ç–µ —á–µ–∫ –≤ –ª—Å –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞",
            query.message.chat.id, query.message.id)
        fee = json.loads(open("settings.json", "r").read())['withdraw_fee']
        sum_to_send = int(payment_sum - (payment_sum / 100 * fee))
        admin_kb = types.InlineKeyboardMarkup()
        admin_kb.add(types.InlineKeyboardButton("–í—ã–ø–ª–∞—Ç–∏–ª", callback_data=json.dumps({"action": "delete"})))
        for admin in config.admins:
            app.send_message(admin, "‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è–ù–æ–≤—ã–π –≤—ã–≤–æ–¥‚ùóÔ∏è‚ùóÔ∏è‚ùóÔ∏è\n"
                                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user['username']}\n"
                                    f"–°—É–º–º–∞ –∑–∞—è–≤–∫–∏: {payment_sum} RUB\n"
                                    f"–°—É–º–º–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã: {sum_to_send} RUB\n"
                                    "–¢–∏–ø –≤—ã–≤–æ–¥–∞: –ë–¢–ö —á–µ–∫", reply_markup=admin_kb)
        app.send_message(config.notifications_channel, "–ù–æ–≤—ã–π –≤—ã–≤–æ–¥\n"
                                                       f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user['username']}\n"
                                                       f"–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {payment_sum} RUB\n"
                                                       "–¢–∏–ø –≤—ã–≤–æ–¥–∞: –ë–¢–ö —á–µ–∫")
    elif payment_type == "qiwi":
        db.status("qiwi_number")
        app.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–ª—è –≤—ã–≤–æ–¥–∞", query.message.chat.id, query.message.id,
                              reply_markup=kbs.back_inline)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "check_qiwi")
def check_qiwi(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    user = db.get_me()
    payment_id = json.loads(query.data).get("payment_id")
    if payment_id is None:
        return
    payment = db.get_payment(payment_id)
    if payment['status'] != 0:
        return
    if qiwi.is_bill_payed(payment_id):
        db.change_balance(payment['sum'])
        db.set_payment_status(payment_id, 1)
        for admin in config.admins:
            app.send_message(admin, "–ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n"
                                    f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user['username']}\n"
                                    f"–°—É–º–º–∞: {payment['sum']} RUB\n"
                                    f"–ß–µ—Ä–µ–∑ –ö–∏–≤–∏")
        app.send_message(from_id, "–°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω\n"
                                  f"–ù–∞ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {payment['sum']} RUB")
        app.edit_message_text("–°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω", query.message.chat.id, query.message.id)
        return
    else:
        app.send_message(from_id, "–°—á—ë—Ç –≤—Å—ë –µ—â—ë –Ω–µ –æ–ø–ª–∞—á–µ–Ω")
        return


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "admin_stats")
def admin_stats(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    if from_id not in config.admins:
        return
    all_users = len(db.get_all_users())
    day_users = db.get_users_count("day")
    week_users = db.get_users_count("week")
    month_users = db.get_users_count("month")
    deals_active = db.get_deals_stats(status="active")
    deals_day = db.get_deals_stats(period="day")
    deals_week = db.get_deals_stats(period="week")
    deals_month = db.get_deals_stats(period="month")
    deals_all = db.get_deals_stats()
    user_balances = db.get_users_balances()
    active_deals_sum = db.active_deals_sum()
    stats = f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {all_users}\n" \
            f"–ë–∞–ª–∞–Ω—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_balances} RUB\n" \
            f"–°—É–º–º–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {active_deals_sum} RUB\n\n" \
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ —Å—É—Ç–∫–∏: {day_users}\n" \
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –Ω–µ–¥–µ–ª—é: {week_users}\n" \
            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞ –º–µ—Å—è—Ü: {month_users}\n\n" \
            f"–í—Å–µ–≥–æ —Å–¥–µ–ª–æ–∫: {deals_all}\n" \
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–¥–µ–ª–æ–∫: {deals_active}\n" \
            f"–°–¥–µ–ª–æ–∫ –∑–∞ —Å—É—Ç–∫–∏: {deals_day}\n" \
            f"–°–¥–µ–ª–æ–∫ –∑–∞ –Ω–µ–¥–µ–ª—é: {deals_week}\n" \
            f"–°–¥–µ–ª–æ–∫ –∑–∞ –º–µ—Å—è—Ü: {deals_month}"
    app.edit_message_text(stats, query.message.chat.id, query.message.id, reply_markup=kbs.admin_back)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "database_backup")
def database_backup(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    if from_id not in config.admins:
        return
    db = open("garant.sqlite", "rb")
    app.send_document(from_id, db)


@app.message_handler(regexp=r"^üîç –ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è$")
def find_user(message):
    from_id = message.from_user.id
    db = Database(from_id, app)
    db.status("find_user")
    app.send_message(from_id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø—Ä–æ–¥–∞–≤—Ü–∞", reply_markup=kbs.back_inline)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "admin_find_user")
def admin_find_user(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    if from_id not in config.admins:
        return
    db.status("admin_find_user")
    app.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫–Ω–µ–π–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", query.message.chat.id, query.message.id,
                          reply_markup=kbs.admin_back)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "confirm_deal")
def confirm_deal(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    user = db.get_me()
    deal_id = json.loads(query.data)['deal_id']
    deal = db.get_deal(deal_id)
    if deal is None:
        return
    if deal['status'] != "waiting_seller":
        return
    if from_id != deal['seller']:
        return
    buyer = db.find_user(user_id=deal['buyer'])
    db.set_deal_status(deal_id, "waiting_for_pay")
    deal_message = f"üî∞ –°–¥–µ–ª–∫–∞: #{deal_id}\n\n" \
                   f"‚ûñ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{buyer['username']}\n\n" \
                   f"‚ûñ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{user['username']}\n\n" \
                   f"üí∞ –°—É–º–º–∞: {deal['sum']} RUB\n\n" \
                   f"üìù –£—Å–ª–æ–≤–∏—è: {deal['info']}\n\n" \
                   "‚ôªÔ∏è –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –æ–ø–ª–∞—Ç–µ"
    communicate_button = types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–ø–∏—Å–∫–∏", callback_data=json.dumps(
        {"action": "communicate", "deal_id": deal_id}))
    kb = types.InlineKeyboardMarkup()
    kb.add(communicate_button)
    app.edit_message_text(deal_message +
                          "\n–ù–µ –ø–µ—Ä–µ–¥–∞–≤–∞–π—Ç–µ —Ç–æ–≤–∞—Ä –¥–æ —Ä–µ–∑–µ—Ä–≤–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ–º –¥–µ–Ω–µ–≥ –≤ —Å–∏—Å—Ç–µ–º–µ, –∏–Ω–∞—á–µ –∞—Ä–±–∏—Ç—Ä–∞–∂ –Ω–µ "
                          "—Å–º–æ–∂–µ—Ç –≤–∞–º –ø–æ–º–æ—á—å –≤ —Å–ª—É—á–∞–µ —Å–∫–∞–º–∞\n\n"
                          "<b>‚ö†Ô∏è –î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—â–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, "
                          "—Ç–æ–≤–∞—Ä –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –°–î–ï–õ–ö–ê –ë–£–î–ï–¢ –û–¢–ú–ï–ù–ï–ù–ê –ò –°–†–ï–î–°–¢–í–ê "
                          "–ö–û–ù–§–ò–°–ö–û–í–ê–ù–´ –î–û –†–ï–®–ï–ù–ò–Ø –°–ü–û–†–ê</b>\n\n"
                          "<i>–í–Ω–∏–º–∞–Ω–∏–µ, –µ—Å–ª–∏ –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ –∏–ª–∏ –ø—Ä–æ–¥–∞–µ—Ç–µ –º–µ—Ä—á —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ —Ç–µ–∫—Å—Ç –Ω–∏–∂–µ.</i>\n"
                          "‚ùóÔ∏è–í–Ω–∏–º–∞–Ω–∏–µ‚ùóÔ∏è, –µ—Å–ª–∏ –í—ã –ø–æ–∫—É–ø–∞–µ—Ç–µ –∏–ª–∏ –ø—Ä–æ–¥–∞–µ—Ç–µ –º–µ—Ä—á —Ç–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —á–∏—Ç–∞–π—Ç–µ –ø—Ä–∞–≤–∏–ª–∞./n"
                          "–õ—é–±—ã–µ–µ —Å–ø–æ—Ä—ã –ø–æ –ú–ï–†–ß–ê–ù–¢–ê–ú –±—É–¥—É—Ç –∑–∞–∫—Ä—ã—Ç—ã –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞ - "
                          "https://telegra.ph/Pravila-pokupki-MERCHA-05-25\n"
                          "https://t.me/joinchat/M7gmDAURtqtjYjcy", query.message.chat.id, query.message.id,
                          reply_markup=kb)
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data=json.dumps({
        "action": "pay_deal",
        "deal_id": deal_id
    })))
    kb.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=json.dumps({
        "action": "decline_deal",
        "deal_id": deal_id
    })))
    kb.add(communicate_button)
    app.send_message(buyer['tg'], deal_message +
                     "\n–ü–æ—Å–ª–µ –Ω–∞—á–∞–ª–∞ —Å–¥–µ–ª–∫–∏ —Å –≤–∞—à–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞ —Å–ø–∏—à–µ—Ç—Å—è –∏ –∑–∞—Ä–µ–∑–µ—Ä–≤–∏—Ä—É–µ—Ç—Å—è –≤ —Å–∏—Å—Ç–µ–º–µ —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ –¥–æ "
                     "–ø–µ—Ä–µ–¥–∞—á–∏ —Ç–æ–≤–∞—Ä–∞ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≤–∞–º–∏ —ç—Ç–æ–≥–æ\n\n"
                     "<b>‚ö†Ô∏è –î–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å—Ä–µ–¥—Å—Ç–≤ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ–±—â–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –±–æ—Ç–∞, "
                     "—Ç–æ–≤–∞—Ä –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –±–æ—Ç–∞, –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ –°–î–ï–õ–ö–ê –ë–£–î–ï–¢ –û–¢–ú–ï–ù–ï–ù–ê –ò –°–†–ï–î–°–¢–í–ê "
                     "–ö–û–ù–§–ò–°–ö–û–í–ê–ù–´ –î–û –†–ï–®–ï–ù–ò–Ø –°–ü–û–†–ê</b>\n\n"
                     "<i>‚ùóÔ∏è –í–ù–ò–ú–ê–ù–ò–ï‚ùóÔ∏è\n"
                     "–ü—Ä–∞–≤–∏–ª–∞ –ø–æ–∫—É–ø–∫–∏ –∏ –ø—Ä–æ–¥–∞–∂–∏ –ú–ï–†–ß–ê - https://telegra.ph/Pravila-pokupki-MERCHA-05-25</i>",
                     reply_markup=kb)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "communicate")
def communicate(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    deal_id = json.loads(query.data)['deal_id']
    deal = db.get_deal(deal_id)
    if deal is None:
        return
    if deal['status'] != "waiting_for_pay" and deal['status'] != "waiting_goods_transfer" or \
            deal['status'] == "arbitrage":
        return
    if from_id != deal['seller'] and from_id != deal['buyer']:
        return
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏",
                                      callback_data=json.dumps({"action": "exit_communicate"})))
    db.status(f"communicate__{deal_id}")
    app.send_message(from_id, "–í—ã –≤–æ—à–ª–∏ –≤ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–ø–∏—Å–∫–∏, —Ç–µ–ø–µ—Ä—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã –±—É–¥–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å "
                              "–±—É–¥—É—Ç –ø–µ—Ä–µ—Å—ã–ª–∞—Ç—å—Å—è –≤—Ç–æ—Ä–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É —Å–¥–µ–ª–∫–∏")


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "exit_communicate")
def exit_communicate(query):
    from_id = query.from_user.id
    db = Database(from_id, app)
    user = db.get_me()
    if user['status'] is not None and user['status'].startswith("communicate"):
        db.status()
        app.send_message(from_id, "–í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã—à–ª–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ –∏ –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –æ–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º –±–æ—Ç–∞")
        app.answer_callback_query(query.id)
    else:
        app.answer_callback_query(query.id, text="–í—ã –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –ø–µ—Ä–µ–ø–∏—Å–∫–∏")


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "pay_deal")
def pay_deal(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    user = db.get_me()
    deal_id = json.loads(query.data)['deal_id']
    deal = db.get_deal(deal_id)
    if deal is None:
        return
    if deal['status'] != "waiting_for_pay":
        return
    if from_id != deal['buyer']:
        return
    if user['balance'] < deal['sum']:
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–ù–∞—á–∞—Ç—å —Å–¥–µ–ª–∫—É", callback_data=json.dumps({
            "action": "pay_deal",
            "deal_id": deal_id
        })))
        kb.add(types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∞", callback_data=json.dumps({
            "action": "decline_deal",
            "deal_id": deal_id
        })))
        app.edit_message_text("–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤", query.message.chat.id, query.message.id,
                              reply_markup=kb)
        return
    seller = db.find_user(user_id=deal['seller'])
    db.change_balance(-deal['sum'])
    db.set_deal_status(deal_id, "waiting_goods_transfer")
    app.send_message(config.notifications_channel, f"üî∞ –°–¥–µ–ª–∫–∞: #{deal_id}\n\n"
                                                   f"‚ûñ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{user['username']}\n\n"
                                                   f"‚ûñ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller['username']}\n\n"
                                                   f"üí∞ –°—É–º–º–∞: {deal['sum']} RUB\n\n"
                                                   "‚ôªÔ∏è –°—Ç–∞—Ç—É—Å: –°–¥–µ–ª–∫–∞ —Å–æ–∑–¥–∞–Ω–∞")
    deal_message = f"üî∞ –°–¥–µ–ª–∫–∞: #{deal_id}\n\n" \
                   f"‚ûñ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{user['username']}\n\n" \
                   f"‚ûñ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller['username']}\n\n" \
                   f"üí∞ –°—É–º–º–∞: {deal['sum']} RUB\n\n" \
                   f"üìù –£—Å–ª–æ–≤–∏—è: {deal['info']}\n\n" \
                   "‚ôªÔ∏è –°—Ç–∞—Ç—É—Å: –ü–µ—Ä–µ–¥–∞—á–∞ —Ç–æ–≤–∞—Ä–∞"
    kb_seller = types.InlineKeyboardMarkup()
    kb_seller.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–¥–µ–ª–∫—É –≤ –∞—Ä–±–∏—Ç—Ä–∞–∂", callback_data=json.dumps({
        "action": "deal_arbitrage",
        "deal_id": deal_id
    })))
    kb_seller.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–ø–∏—Å–∫–∏", callback_data=json.dumps(
        {"action": "communicate", "deal_id": deal_id})))
    kb_buyer = types.InlineKeyboardMarkup()
    kb_buyer.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–µ—Ä–µ–¥–∞—á—É —Ç–æ–≤–∞—Ä–∞", callback_data=json.dumps({
        "action": "close_deal",
        "deal_id": deal_id
    })))
    kb_buyer.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å–¥–µ–ª–∫—É –≤ –∞—Ä–±–∏—Ç—Ä–∞–∂", callback_data=json.dumps({
        "action": "deal_arbitrage",
        "deal_id": deal_id
    })))
    kb_buyer.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–ø–∏—Å–∫–∏", callback_data=json.dumps(
        {"action": "communicate", "deal_id": deal_id})))
    app.send_message(from_id, deal_message, reply_markup=kb_buyer, disable_web_page_preview=True)
    app.send_message(seller['tg'], deal_message, reply_markup=kb_seller, disable_web_page_preview=True)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "deal_arbitrage")
def deal_arbitrage(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    deal_id = json.loads(query.data)['deal_id']
    deal = db.get_deal(deal_id)
    seller = db.find_user(user_id=deal['seller'])
    buyer = db.find_user(user_id=deal['buyer'])
    if deal is None:
        return
    if deal['status'] != "waiting_goods_transfer":
        return
    if from_id != deal['buyer'] and from_id != deal['seller']:
        return
    db.set_deal_status(deal_id, "arbitrage")
    arbitrator = db.find_user(user_id=config.arbitrage)
    deal_message = f"–°–¥–µ–ª–∫–∞ #{deal_id} –ø–µ—Ä–µ–≤–µ–¥–µ–Ω–∞ –≤ —Å—Ç–∞—Ç—É—Å –∞—Ä–±–∏—Ç—Ä–∞–∂–∞ –ø–æ —Ä–µ—à–µ–Ω–∏—é –æ–¥–Ω–æ–π –∏–∑ —Å—Ç–æ—Ä–æ–Ω, –¥–∞–ª—å–Ω–µ–π—à–∏–µ " \
                   f"–º–∞–Ω–∏–ø—É–ª—è—Ü–∏–∏ —Å–æ —Å–¥–µ–ª–∫–æ–π –º–æ–∂–µ—Ç –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —Ç–æ–ª—å–∫–æ –∞—Ä–±–∏—Ç—Ä\n\n" \
                   f"–ö–æ–Ω—Ç–∞–∫—Ç –∞—Ä–±–∏—Ç—Ä–∞: @{arbitrator['username']}\n\n" \
                   f"–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–∫–∞ –∞—Ä–±–∏—Ç—Ä –Ω–∞–ø–∏—à–µ—Ç –≤–∞–º, –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –ø–µ—Ä–≤—ã–º, –æ–±—ä—è—Å–Ω—è—è —Å—É—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫–∞\n\n" \
                   f"–ü–æ —Ä–µ—à–µ–Ω–∏—é –∞—Ä–±–∏—Ç—Ä–∞ —Å–¥–µ–ª–∫–∞ –±—É–¥–µ—Ç –∑–∞–∫—Ä—ã—Ç–∞ –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞ –∏–ª–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è\n" \
                   f"–î–∞–Ω–Ω–∞—è —Å–¥–µ–ª–∫–∞ –Ω–µ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å—Å—è –≤ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ —Å–¥–µ–ª–æ–∫ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n" \
                   f"–£ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–µ–π —Å—Ç–æ—Ä–æ–Ω—ã —Ä–µ–π—Ç–∏–Ω–≥ –æ—Ç–Ω–∏–º–µ—Ç—Å—è –Ω–∞ –æ–¥–Ω—É –µ–¥–∏–Ω–∏—Ü—É, –≤—ã–∏–≥—Ä–∞–≤—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ —Ä–µ–π—Ç–∏–Ω–≥ –ø—Ä–∏–±–∞–≤–∏—Ç—Å—è " \
                   f"–Ω–∞ –æ–¥–∏–Ω "
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–ø–∏—Å–∫–∏", callback_data=json.dumps(
        {"action": "communicate", "deal_id": deal_id})))
    app.send_message(seller['tg'], deal_message, reply_markup=kb)
    app.send_message(buyer['tg'], deal_message, reply_markup=kb)
    app.send_message(config.notifications_channel, f"üî∞ –°–¥–µ–ª–∫–∞: #{deal_id}\n\n"
                                                   f"‚ûñ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{buyer['username']}\n\n"
                                                   f"‚ûñ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller['username']}\n\n"
                                                   f"üí∞ –°—É–º–º–∞: {deal['sum']} RUB\n\n"
                                                   "‚ôªÔ∏è –°—Ç–∞—Ç—É—Å: –ê—Ä–±–∏—Ç—Ä–∞–∂")
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –≤ –ø–æ–ª—å–∑—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è", callback_data=json.dumps({
        "action": "close_arbitrator",
        "deal_id": deal_id,
        "to": "buyer"
    })))
    kb.add(types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞", callback_data=json.dumps({
        "action": "close_arbitrator",
        "deal_id": deal_id,
        "to": "seller"
    })))
    app.send_message(arbitrator['tg'], f"üî∞ –°–¥–µ–ª–∫–∞: #{deal_id}\n\n"
                                       f"‚ûñ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{buyer['username']}\n\n"
                                       f"‚ûñ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller['username']}\n\n"
                                       f"üí∞ –°—É–º–º–∞: {deal['sum']} RUB\n\n"
                                       f"üìù –£—Å–ª–æ–≤–∏—è: {deal['info']}\n\n"
                                       "‚ôªÔ∏è –°—Ç–∞—Ç—É—Å: –û—Ç–∫—Ä—ã—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂", reply_markup=kb)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "close_arbitrator")
def close_arbitrator(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    seller_db = Database(from_id, app)
    deal_id = json.loads(query.data)['deal_id']
    deal = seller_db.get_deal(deal_id)
    seller = seller_db.find_user(user_id=deal['seller'])
    buyer = seller_db.find_user(user_id=deal['buyer'])
    buyer_db = Database(buyer['tg'], app)
    seller_db = Database(seller['tg'], app)
    if deal is None:
        return
    if deal['status'] != "arbitrage":
        return
    if from_id != config.arbitrage:
        return
    favor = json.loads(query.data)['to']
    if favor == "seller":
        favor = "–ø—Ä–æ–¥–∞–≤—Ü–∞"
        seller_db.change_balance(deal['sum'])
        db.add_rating(seller['tg'], 1)
        db.add_rating(buyer['tg'], -1)
    else:
        favor = "–ø–æ–∫—É–ø–∞—Ç–µ–ª—è"
        db.add_rating(seller['tg'], -1)
        db.add_rating(buyer['tg'], 1)
        buyer_db.change_balance(deal['sum'])
    db.set_deal_status(deal_id, "closed_arbitrage")
    deal_message = f"–°–¥–µ–ª–∫–∞ #{deal_id} –∑–∞–∫—Ä—ã—Ç–∞ –∞—Ä–±–∏—Ç—Ä–æ–º –≤ –ø–æ–ª—å–∑—É {favor}"
    app.send_message(config.notifications_channel, f"üî∞ –°–¥–µ–ª–∫–∞: #{deal_id}\n\n"
                                                   f"‚ûñ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{buyer['username']}\n\n"
                                                   f"‚ûñ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller['username']}\n\n"
                                                   f"üí∞ –°—É–º–º–∞: {deal['sum']} RUB\n\n"
                                                   f"‚ôªÔ∏è –°—Ç–∞—Ç—É—Å: –ó–∞–∫—Ä—ã—Ç–æ –≤ –ø–æ–ª—å–∑—É {favor}")
    app.send_message(seller['tg'], deal_message)
    app.send_message(buyer['tg'], deal_message)
    app.send_message(from_id, f"–°–¥–µ–ª–∫–∞ #{deal_id} —É—Å–ø–µ—à–Ω–æ –∑–∞–∫—Ä—ã—Ç–∞ –≤ –ø–æ–ª—å–∑—É {favor}")


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "add_promocode")
def add_promocode(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    if from_id not in config.admins:
        return
    db.status("promocode_sum")
    app.edit_message_text("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ–º–æ–∫–æ–¥–∞", query.message.chat.id, query.message.id,
                          reply_markup=kbs.admin_back)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "close_deal")
def close_deal(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    user = db.get_me()
    deal_id = json.loads(query.data)['deal_id']
    deal = db.get_deal(deal_id)
    if deal is None:
        return
    if deal['status'] != "waiting_goods_transfer":
        return
    if from_id != deal['buyer']:
        return
    seller_db = Database(deal['seller'], app)
    seller = seller_db.get_me()
    db.set_deal_status(deal_id, 'closed')
    db.add_rating(from_id, 1)
    db.add_rating(seller['tg'], 1)
    seller_db.change_balance(deal['sum'])
    deal_message = f"üî∞ –°–¥–µ–ª–∫–∞: #{deal_id}\n\n" \
                   f"‚ûñ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{user['username']}\n\n" \
                   f"‚ûñ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller['username']}\n\n" \
                   f"üí∞ –°—É–º–º–∞: {deal['sum']} RUB\n\n" \
                   f"üìù –£—Å–ª–æ–≤–∏—è: {deal['info']}\n\n" \
                   "‚ôªÔ∏è –°—Ç–∞—Ç—É—Å: –°–¥–µ–ª–∫–∞ –∑–∞–∫—Ä—ã—Ç–∞ —É—Å–ø–µ—à–Ω–æ"
    app.send_message(config.notifications_channel, f"üî∞ –°–¥–µ–ª–∫–∞: #{deal_id}\n\n"
                                                   f"‚ûñ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{user['username']}\n\n"
                                                   f"‚ûñ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller['username']}\n\n"
                                                   f"üí∞ –°—É–º–º–∞: {deal['sum']} RUB\n\n"
                                                   "‚ôªÔ∏è –°—Ç–∞—Ç—É—Å: –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
    app.send_message(from_id, deal_message, reply_markup=kbs.back_inline)
    app.send_message(seller['tg'], deal_message, reply_markup=kbs.back_inline)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "decline_deal")
def decline_deal(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    deal_id = json.loads(query.data)['deal_id']
    deal = db.get_deal(deal_id)
    if deal is None:
        return
    if deal['status'] != "waiting_seller" and deal['status'] != "waiting_for_pay":
        return
    if from_id != deal['buyer'] and from_id != deal['seller']:
        return
    db.set_deal_status(deal_id, "canceled")
    app.send_message(deal['seller'], f"üî∞ –°–¥–µ–ª–∫–∞: #{deal_id} –û—Ç–º–µ–Ω–µ–Ω–∞")
    app.send_message(deal['buyer'], f"üî∞ –°–¥–µ–ª–∫–∞: #{deal_id} –û—Ç–º–µ–Ω–µ–Ω–∞")


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "cancel_payment")
def cancel_payment(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    payment_id = json.loads(query.data).get("payment_id")
    payment = db.get_payment(payment_id)
    if payment_id is None:
        return
    if payment['status'] != 0:
        return
    if payment['sum'] == "qiwi":
        qiwi.reject_bill(payment_id)
    db.set_payment_status(payment_id, 2)
    app.edit_message_text("–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞", query.message.chat.id, query.message.id)


@app.message_handler(commands=['admin'])
def admin_inline(message):
    from_id = message.from_user.id
    if from_id not in config.admins:
        return
    app.send_message(from_id, "–ê–¥–º–∏–Ω-–º–µ–Ω—é", reply_markup=kbs.admin_inline)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "arbitrages")
def arbitrages(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    if from_id not in config.admins:
        return
    deals = db.get_arbitrage_deals()
    kb = types.InlineKeyboardMarkup()
    for deal in deals:
        kb.add(types.InlineKeyboardButton(f"–°–¥–µ–ª–∫–∞ #{deal['id']}", callback_data=json.dumps(
            {"action": "arbitrage_info", "deal_id": deal['id']})))
    kb.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=json.dumps({"action": "admin_back"})))
    app.edit_message_text("–°–ø–∏—Å–æ–∫ –∞—Ä–±–∏—Ç—Ä–∞–∂–µ–π", query.message.chat.id, query.message.id, reply_markup=kb)


@app.callback_query_handler(lambda query: json.loads(query.data)['action'] == "arbitrage_info")
def arbitrage_info(query):
    app.answer_callback_query(query.id)
    from_id = query.from_user.id
    db = Database(from_id, app)
    if from_id not in config.admins:
        return
    deal_id = json.loads(query.data)['deal_id']
    deal = db.get_deal(deal_id)
    buyer = db.find_user(user_id=deal['buyer'])
    seller = db.find_user(user_id=deal['seller'])
    kb = types.InlineKeyboardMarkup()
    kb.add(types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –≤ –ø–æ–ª—å–∑—É –ø–æ–∫—É–ø–∞—Ç–µ–ª—è", callback_data=json.dumps({
        "action": "close_arbitrator",
        "deal_id": deal_id,
        "to": "buyer"
    })))
    kb.add(types.InlineKeyboardButton("–ó–∞–∫—Ä—ã—Ç—å –≤ –ø–æ–ª—å–∑—É –ø—Ä–æ–¥–∞–≤—Ü–∞", callback_data=json.dumps({
        "action": "close_arbitrator",
        "deal_id": deal_id,
        "to": "seller"
    })))
    kb.add(types.InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data=json.dumps({
        "action": "admin_back"
    })))
    app.edit_message_text(f"üî∞ –°–¥–µ–ª–∫–∞: #{deal['id']}\n\n"
                          f"‚ûñ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{buyer['username']}\n\n"
                          f"‚ûñ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller['username']}\n\n"
                          f"üí∞ –°—É–º–º–∞: {deal['sum']} RUB\n\n"
                          f"üìù –£—Å–ª–æ–≤–∏—è: {deal['info']}\n\n"
                          "‚ôªÔ∏è –°—Ç–∞—Ç—É—Å: –û—Ç–∫—Ä—ã—Ç –∞—Ä–±–∏—Ç—Ä–∞–∂", query.message.chat.id, query.message.id, reply_markup=kb)


@app.channel_post_handler(commands=['peer'])
def peer_channel(message):
    print(message.chat.id)


@app.message_handler(commands=['peer'])
def peer_channel(message):
    print(message.chat.id)


@app.message_handler(content_types=['text'])
def text_handler(message):
    global checking_banker
    if message.chat.id < 0:
        return
    from_id = message.from_user.id
    text = message.text
    db = Database(from_id, app)
    user = db.get_me()
    if text == '/start':
        app.send_message(from_id, f"üëë –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user['username']}!", reply_markup=kbs.main_kb)
        return
    if db.can_activate_promo(text):
        promo_sum = db.activate_promo(text)
        if not promo_sum:
            return
        db.change_balance(promo_sum)
        app.send_message(from_id, f"–ù–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {promo_sum} RUB")
    if user['status'] is not None:
        status = user['status']
        if status == "deposit_sum":
            try:
                deposit_sum = int(text)
            except ValueError:
                app.send_message(from_id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=kbs.back_inline)
                return
            if deposit_sum <= 0:
                app.send_message(from_id, "–í–≤–µ–¥–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ —á–∏—Å–ª–æ", reply_markup=kbs.back_inline)
                return
            db.temp(deposit_sum)
            db.status()
            app.send_message(from_id, "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –æ–ø–ª–∞—Ç—ã", reply_markup=kbs.deposit_type)
        elif status == "withdraw_sum":
            try:
                withdraw_sum = int(text)
            except ValueError:
                app.send_message(from_id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=kbs.back_inline)
                return
            if withdraw_sum < 50:
                app.send_message(from_id, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞ - 50 RUB", reply_markup=kbs.back_inline)
                return
            if withdraw_sum > user['balance']:
                app.send_message(from_id, "–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n"
                                          f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} RUB", reply_markup=kbs.back_inline)
                return
            fee = json.loads(open("settings.json", "r").read())['withdraw_fee']
            sum_to_send = int(withdraw_sum - (withdraw_sum / 100 * fee))
            db.temp(withdraw_sum)
            db.status()
            app.send_message(from_id, f"–ö –≤—ã–ø–ª–∞—Ç–µ: {sum_to_send} RUB\n"
                                      "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± –≤—ã–≤–æ–¥–∞ (–≤—ã–≤–æ–¥ –Ω–∞ –∫–∏–≤–∏ –º–æ–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π)",
                             reply_markup=kbs.withdraw_type)
        elif status == "qiwi_number":
            payment_sum = int(user['temp_field'])
            fee = json.loads(open("settings.json", "r").read())['withdraw_fee']
            sum_to_send = int(payment_sum - (payment_sum / 100 * fee))
            if payment_sum > user['balance']:
                return
            if qiwi_withdraw.transfer(text, sum_to_send):
                db.change_balance(-payment_sum)
                db.status()
                app.send_message(from_id, f"–í—ã–ø–ª–∞—Ç–∞ –Ω–∞ –Ω–æ–º–µ—Ä {text} —Å—É–º–º–æ–π {sum_to_send} RUB —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞")
                app.send_message(config.notifications_channel, "–ù–æ–≤—ã–π –≤—ã–≤–æ–¥\n"
                                                               f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user['username']}\n"
                                                               f"–°—É–º–º–∞ –≤—ã–≤–æ–¥–∞: {payment_sum} RUB\n"
                                                               "–¢–∏–ø –≤—ã–≤–æ–¥–∞: –ö–∏–≤–∏")
                for admin in config.admins:
                    app.send_message(admin, "–í—ã–ø–ª–∞—Ç–∞ –Ω–∞ –∫–∏–≤–∏Ô∏è\n"
                                            f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user['username']}\n"
                                            f"–°—É–º–º–∞ –∑–∞—è–≤–∫–∏: {payment_sum} RUB\n"
                                            f"–°—É–º–º–∞ –¥–ª—è –≤—ã–ø–ª–∞—Ç—ã: {sum_to_send} RUB\n"
                                            "–¢–∏–ø –≤—ã–≤–æ–¥–∞: –ö–∏–≤–∏", reply_markup=kbs.inline_delete)
            else:
                app.send_message(from_id, "–û—à–∏–±–∫–∞ –≤—ã–ø–ª–∞—Ç—ã, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–π –Ω–æ–º–µ—Ä –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É")
                db.status()
        elif user['status'].startswith("waiting_btc"):
            payment_id = user['status'].split("__")[1]
            if payment_id is None:
                return
            payment = db.get_payment(payment_id)
            if payment['status'] != 0:
                return
            check_id = re.findall(r"https://telegram\.me/BTC_CHANGE_BOT\?start=(.*)", text)
            if len(check_id) < 1:
                app.send_message(from_id, "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=kbs.back_inline)
                return
            while True:
                if checking_banker:
                    sleep(0.1)
                    continue
                checking_banker = True
                loop = asyncio.new_event_loop()
                asyncio.set_event_loop(loop)
                banker = Banker(config.api_id, config.api_hash)
                try:
                    result = banker.check_cheque(check_id[0])
                except Exception as e:
                    checking_banker = False
                    print(e)
                    sleep(0.1)
                    continue
                else:
                    del banker
                    checking_banker = False
                    break
            # noinspection PyUnboundLocalVariable
            if not result:
                app.send_message(from_id, "–ù–µ–≤–∞–ª–∏–¥–Ω—ã–π —á–µ–∫, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑")
                return
            # noinspection PyUnboundLocalVariable
            db.change_balance(result)
            db.set_payment_status(payment_id, 1)
            # noinspection PyUnboundLocalVariable
            for admin in config.admins:
                app.send_message(admin, "–ù–æ–≤–æ–µ –ø–æ–ø–æ–ª–Ω–µ–Ω–∏–µ\n"
                                        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user['username']}\n"
                                        f"–°—É–º–º–∞: {result} RUB\n"
                                        f"–ß–µ—Ä–µ–∑ –ë–¢–ö")
            app.send_message(from_id, "–°—á—ë—Ç —É—Å–ø–µ—à–Ω–æ –æ–ø–ª–∞—á–µ–Ω\n"
                                      f"–ù–∞ –±–∞–ª–∞–Ω—Å –∑–∞—á–∏—Å–ª–µ–Ω–æ {result} RUB")
            db.status()
            return
        elif status == "find_user":
            nickname = re.sub(r"[^a-zA-Z0-9_]", "", text)
            finding_user = db.find_user(nickname)
            if finding_user is None:
                app.send_message(from_id, "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                                          "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=kbs.back_inline)
                return
            if finding_user['tg'] == from_id:
                app.send_message(from_id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É —Å —Å–∞–º–∏–º —Å–æ–±–æ–π\n"
                                          "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=kbs.back_inline)
                return
            user_deals_count = db.get_deals_count(finding_user['tg'])
            user_deals_sum = db.get_deals_sum(finding_user['tg'])
            text = "–ü–æ–¥—Ä–æ–±–Ω–µ–µ:\n\n" \
                   f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{finding_user['username']}\n\n" \
                   f"‚ôªÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–¥–µ–ª–æ–∫: {user_deals_count}\n\n" \
                   f"üí≥ –°—É–º–º–∞ —Å–¥–µ–ª–æ–∫: {user_deals_sum} RUB\n\n" \
                   f"üìä –†–µ–π—Ç–∏–Ω–≥: {finding_user['rating']}"
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("üî∞ –û—Ç–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É", callback_data=json.dumps({
                "action": "open_deal",
                "user_id": finding_user['tg']
            })))
            db.status()
            app.send_message(from_id, text, reply_markup=kb)
        elif status == "admin_find_user":
            if from_id not in config.admins:
                return
            nickname = re.sub(r"[^a-zA-Z0-9_]", "", text)
            finding_user = db.find_user(nickname)
            if finding_user is None:
                app.send_message(from_id, "–¢–∞–∫–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç\n"
                                          "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=kbs.back_inline)
                return
            text = f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{finding_user['username']}\n" \
                   f"–ë–∞–ª–∞–Ω—Å: {finding_user['balance']}\n\n" \
                   f"–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –±–∞–ª–∞–Ω—Å"
            db.status(f"new_balance__{finding_user['tg']}")
            app.send_message(from_id, text, reply_markup=kbs.admin_back)
        elif status.startswith("new_balance"):
            try:
                new_balance = int(text)
            except ValueError:
                app.send_message(from_id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=kbs.admin_back)
                return
            if new_balance < 0:
                app.send_message(from_id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ –∏–ª–∏ —Ä–∞–≤–Ω–æ–µ –Ω—É–ª—é", reply_markup=kbs.admin_back)
                return
            finding_user = int(status.split("__")[1])
            finding_user = Database(finding_user, app)
            finding_user.set_balance(new_balance)
            app.send_message(from_id, "–£—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            db.status()
        elif status.startswith("deal_sum"):
            seller_id = status.split("__")[1]
            seller = db.find_user(user_id=seller_id)
            if seller is None:
                return
            try:
                deal_sum = float(text)
            except ValueError:
                app.send_message(from_id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=kbs.back_inline)
                return
            if deal_sum < 10:
                app.send_message(from_id, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Å—É–º–º–∞ —Å–¥–µ–ª–∫–∏ - 10 —Ä—É–±")
                return
            if user['balance'] < deal_sum:
                app.send_message(from_id, "–ù–∞ –≤–∞—à–µ–º –±–∞–ª–∞–Ω—Å–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤\n"
                                          f"–í–∞—à –±–∞–ª–∞–Ω—Å: {user['balance']} RUB", reply_markup=kbs.back_inline)
                return
            db.status(f"deal_info__{seller_id}__{deal_sum}")
            app.send_message(from_id, "üõë –í–ê–ñ–ù–û üõë\n\n"
                                      "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –ø–æ–¥—Ä–æ–±–Ω–æ –æ–ø–∏—à–∏—Ç–µ –≤—Å–µ —É—Å–ª–æ–≤–∏—è –∫–æ—Ç–æ—Ä—ã–º –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å —Ç–æ–≤–∞—Ä, "
                                      "–∞—Ä–±–∏—Ç—Ä –Ω–µ –±—É–¥–µ—Ç —É—á–∏—Ç—ã–≤–∞—Ç—å –ª–∏—á–Ω—É—é –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –ø—Ä–æ–¥–∞–≤—Ü–æ–º, –µ—Å–ª–∏ —Å–ø–æ—Ä–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–µ "
                                      "–æ–ø–∏—Å—ã–≤–∞–ª—Å—è –Ω–∞ –¥–∞–Ω–Ω–æ–º —ç—Ç–∞–ø–µ.",
                             reply_markup=kbs.back_inline)
        elif status.startswith("deal_info"):
            db.status()
            seller_id = status.split("__")[1]
            seller = db.find_user(user_id=seller_id)
            deal_sum = status.split("__")[2]
            deal_info = text
            deal_id = db.add_deal(from_id, seller_id, deal_sum, deal_info)
            deal_message = f"üî∞ –°–¥–µ–ª–∫–∞: #{deal_id} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞.\n\n" \
                           f"‚ûñ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{user['username']}\n\n" \
                           f"‚ûñ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller['username']}\n\n" \
                           f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {deal_sum} RUB\n\n" \
                           f"üìù –£—Å–ª–æ–≤–∏—è: {deal_info}\n\n" \
                           "‚ôªÔ∏è –°—Ç–∞—Ç—É—Å: –û–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
            app.send_message(from_id, deal_message)
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data=json.dumps({
                "action": "confirm_deal",
                "deal_id": deal_id
            })))
            kb.add(types.InlineKeyboardButton("–û—Ç–∫–∞–∑–∞—Ç—å—Å—è", callback_data=json.dumps({
                "action": "decline_deal",
                "deal_id": deal_id
            })))
            app.send_message(seller_id, deal_message, reply_markup=kb)
        elif status == "ad_button_text":
            if from_id not in config.admins:
                return
            db.temp(text)
            db.status("ad_text")
            app.send_message(from_id, "–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–Ω–æ–ø–∫–∏")
        elif status == "ad_text":
            if from_id not in config.admins:
                return
            button_text = user['temp_field']
            button_id = db.add_ad_button(button_text, text, user['mailing_photo'])
            db.status()
            app.send_message(from_id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∏ —Ä–µ–∫–ª–∞–º–Ω—É—é –∫–Ω–æ–ø–∫—É, –µ—ë Id: {button_id}",
                             reply_markup=kbs.admin_inline)
        elif status == "edit_button":
            if from_id not in config.admins:
                return
            db.change_button_text(user['temp_field'], text)
            db.status()
            app.send_message(from_id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–Ω–æ–ø–∫–∏",
                             reply_markup=kbs.admin_inline)
        elif status == "withdraw_fee":
            if from_id not in config.admins:
                return
            try:
                fee = int(text)
            except ValueError:
                app.send_message(from_id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=kbs.admin_back)
                return
            if fee > 99 or fee < 1:
                app.send_message(from_id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 99", reply_markup=kbs.admin_back)
                return
            open("settings.json", "w").write(json.dumps({"withdraw_fee": fee}))
            db.status()
            app.send_message(from_id, "–ù–æ–≤–∞—è –∫–æ–º–∏—Å—Å–∏—è —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")
        elif status == "promocode_sum":
            if from_id not in config.admins:
                return
            try:
                promocode_sum = int(text)
            except ValueError:
                app.send_message(from_id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=kbs.admin_back)
                return
            if promocode_sum <= 0:
                app.send_message(from_id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")
                return
            db.status(f"promocode_activations__{promocode_sum}")
            app.send_message(from_id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–π", reply_markup=kbs.admin_back)
        elif status.startswith("promocode_activations"):
            if from_id not in config.admins:
                return
            promocode_sum = int(status.split("__")[1])
            try:
                activations = int(text)
            except ValueError:
                app.send_message(from_id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ", reply_markup=kbs.admin_back)
                return
            if activations <= 0:
                app.send_message(from_id, "–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –±–æ–ª—å—à–µ 0")
                return
            db.status()
            promocode_text = "".join([random.choice(string.ascii_letters + string.digits) for _ in range(10)])
            db.add_promocode(promocode_text, promocode_sum, activations)
            app.send_message(from_id, "–ü—Ä–æ–º–æ–∫–æ–¥ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω, –≤–æ—Ç –µ–≥–æ –∫–æ–¥:")
            app.send_message(from_id, promocode_text)
        elif status == "mailing_text":
            if from_id not in config.admins:
                return
            db.temp(text)
            db.status("mailing_date")
            count = len(db.get_all_users())
            if user['mailing_photo'] is None:
                app.send_message(from_id, f"–†–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—É—á–∞—Ç {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                                          "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ú–°–ö (20:00 –∏–ª–∏ 2021-10-10 20:00)""",
                                 reply_markup=kbs.admin_back)
            else:
                attachment = user['mailing_photo'].split("|")
                if attachment[0] == "PHOTO":
                    app.send_photo(user['tg'], attachment[1], f"–†–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—É—á–∞—Ç {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                                                              "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ú–°–ö (20:00 –∏–ª–∏ 2021-10-10 "
                                                              "20:00)""", reply_markup=kbs.admin_back)
                elif attachment[0] == "VIDEO":
                    app.send_video(user['tg'], attachment[1], caption=f"–†–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—É—á–∞—Ç {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                                                                      "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ú–°–ö (20:00 –∏–ª–∏ "
                                                                      "2021-10-10 20:00)""",
                                   reply_markup=kbs.admin_back)
                elif attachment[0] == "DOCUMENT":
                    app.send_document(user['tg'], attachment[1], caption=f"–†–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—É—á–∞—Ç {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                                                                         "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ú–°–ö (20:00 –∏–ª–∏ "
                                                                         "2021-10-10 20:00)""",
                                      reply_markup=kbs.admin_back)
                elif attachment[0] == "ANIMATION":
                    app.send_animation(user['tg'], attachment[1], caption=f"–†–∞—Å—Å—ã–ª–∫—É –ø–æ–ª—É—á–∞—Ç {count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
                                                                          "–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –ú–°–ö (20:00 –∏–ª–∏ "
                                                                          "2021-10-10 20:00)""",
                                       reply_markup=kbs.admin_back)
        elif status == "mailing_date":
            if from_id not in config.admins:
                return
            if re.fullmatch(r"^\d{1,2}:\d{2}$", text):
                time = re.findall(r"^(\d{1,2}):(\d{2})$", text)[0]
                now = datetime.now(timezone(timedelta(hours=3)))
                time = datetime(year=now.year, month=now.month, day=now.day, hour=int(time[0]),
                                minute=int(time[1]), tzinfo=timezone(timedelta(hours=3)))
            elif re.fullmatch(r"^(\d{4})-(\d{1,2})-(\d{1,2}) (\d{1,2}):(\d{2})$", text):
                time = re.findall(r"^(\d{4})-(\d{1,2})-(\d{1,2}) (\d{1,2}):(\d{2})$", text)[0]
                time = datetime(year=int(time[0]), month=int(time[1]), day=int(time[2]), hour=int(time[3]),
                                minute=int(time[4]), tzinfo=timezone(timedelta(hours=3)))
            else:
                app.send_message(from_id, "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã", reply_markup=kbs.admin_back)
                return
            mailing_id = db.add_mailing(user['temp_field'], user['tg'], int(time.timestamp()), user['mailing_photo'])
            keyboard = types.InlineKeyboardMarkup()
            keyboard.add(types.InlineKeyboardButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data=json.dumps(
                {'action': 'confirm_mailing', 'id': mailing_id})))
            keyboard.add(
                types.InlineKeyboardButton("–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
                                           callback_data=json.dumps({'action': 'test_mailing', 'id': mailing_id})),
                types.InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É",
                                           callback_data=json.dumps({'action': 'cancel_mailing', 'id': mailing_id})))
            if user['mailing_photo'] is None:
                app.send_message(from_id, f"""–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {time}""", reply_markup=keyboard)
            else:
                attachment = user['mailing_photo'].split("|")
                if attachment[0] == "PHOTO":
                    app.send_photo(user['tg'], attachment[1], f"""–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {time}""", reply_markup=keyboard)
                elif attachment[0] == "VIDEO":
                    app.send_video(user['tg'], attachment[1], caption=f"""–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {time}""",
                                   reply_markup=keyboard)
                elif attachment[0] == "DOCUMENT":
                    app.send_document(user['tg'], attachment[1], caption=f"""–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {time}""",
                                      reply_markup=keyboard)
                elif attachment[0] == "ANIMATION":
                    app.send_animation(user['tg'], attachment[1], caption=f"""–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: {time}""",
                                       reply_markup=keyboard)

            db.status()
        elif status.startswith("deal_feedback"):
            deal_id = int(status.split("__")[1])
            deal = db.get_deal(deal_id)
            if deal['status'] != "closed":
                db.status()
                return
            if deal['seller'] != from_id and deal['buyer'] != from_id:
                db.status()
                return
            if len(text) < 30:
                app.send_message(from_id, "–ú–∏–Ω–∏–º–∞–ª—å–Ω–∞—è –¥–ª–∏–Ω–∞ –æ—Ç–∑—ã–≤–∞ - 30 —Å–∏–º–æ–≤–ª–æ–≤", reply_markup=kbs.back_inline)
                return
            buyer = db.find_user(user_id=deal['buyer'])
            seller = db.find_user(user_id=deal['seller'])
            if deal['seller'] == from_id:
                whom = "–ø—Ä–æ–¥–∞–≤—Ü–∞"
            else:
                whom = "–ø–æ–∫—É–ø–∞—Ç–µ–ª—è"
            db.status()
            feedback_award = int(deal['sum'] * 0.01)
            db.change_balance(feedback_award)
            channel_message = f"üî∞ –°–¥–µ–ª–∫–∞: #{deal_id}\n\n" \
                              f"‚ûñ –ü–æ–∫—É–ø–∞—Ç–µ–ª—å: @{buyer['username']}\n\n" \
                              f"‚ûñ –ü—Ä–æ–¥–∞–≤–µ—Ü: @{seller['username']}\n\n" \
                              f"üí∞ –°—É–º–º–∞: {deal['sum']} RUB\n\n" \
                              f"‚ôªÔ∏è –û—Ç–∑—ã–≤ {whom}: {text}"
            app.send_message(config.feedback_channel, channel_message)
            app.send_message(config.notifications_channel, channel_message)
            app.send_message(from_id, f"–í—ã —É—Å–ø–µ—à–Ω–æ –æ—Å—Ç–∞–≤–∏–ª–∏ –æ—Ç–∑—ã–≤, –Ω–∞ –≤–∞—à –±–∞–ª–∞–Ω—Å –Ω–∞—á–∏—Å–ª–µ–Ω–æ {feedback_award}")
        elif status.startswith("communicate"):
            deal_id = int(status.split("__")[1])
            deal = db.get_deal(deal_id)
            if from_id != deal['seller'] and from_id != deal['buyer']:
                return
            if deal['status'] != "waiting_for_pay" and deal['status'] != "waiting_goods_transfer" or \
                    deal['status'] == "arbitrage":
                return
            db.add_communicate_message(deal_id, text)
            if from_id == deal['seller']:
                receiver = deal['buyer']
            else:
                receiver = deal['seller']
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–ø–∏—Å–∫–∏", callback_data=json.dumps(
                {"action": "communicate", "deal_id": deal_id})))
            app.send_message(receiver, f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–¥–µ–ª–∫–µ #{deal_id}:\n\n"
                                       f"{user['username']}: {text}", reply_markup=kb)
            kb = types.InlineKeyboardMarkup()
            kb.add(types.InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏",
                                              callback_data=json.dumps({"action": "exit_communicate"})))
            app.send_message(from_id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Ç–æ—Ä–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É —Å–¥–µ–ª–∫–∏", reply_markup=kb)


@app.message_handler(content_types=['animation'])
def gif(message):
    if message.chat.id < 0:
        return
    from_id = message.from_user.id
    db = Database(from_id, app)
    user = db.get_me()
    photo_id = message.animation.file_id
    status = user['status']
    if status == "mailing_text":
        if from_id not in config.admins:
            return
        db.mailing_photo("ANIMATION|" + photo_id)
        app.send_message(from_id, "–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kbs.admin_back)
    elif status == "ad_text":
        if from_id not in config.admins:
            return
        db.mailing_photo("ANIMATION|" + photo_id)
        db.status("ad_text")
        app.send_message(from_id, "–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–Ω–æ–ø–∫–∏",
                         reply_markup=kbs.admin_back)


@app.message_handler(content_types=['document'])
def document(message):
    if message.chat.id < 0:
        return
    from_id = message.from_user.id
    db = Database(from_id, app)
    user = db.get_me()
    photo_id = message.document.file_id
    status = user['status']
    if status == "mailing_text":
        if from_id not in config.admins:
            return
        db.mailing_photo("DOCUMENT|" + photo_id)
        app.send_message(from_id, "–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kbs.admin_back)
    elif status == "ad_text":
        if from_id not in config.admins:
            return
        db.mailing_photo("DOCUMENT|" + photo_id)
        db.status("ad_text")
        app.send_message(from_id, "–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–Ω–æ–ø–∫–∏",
                         reply_markup=kbs.admin_back)
    elif status.startswith("communicate"):
        deal_id = int(status.split("__")[1])
        deal = db.get_deal(deal_id)
        if from_id != deal['seller'] and from_id != deal['buyer']:
            return
        if deal['status'] != "waiting_for_pay" and deal['status'] != "waiting_goods_transfer" or \
                deal['status'] == "arbitrage":
            return
        db.add_communicate_message(deal_id, "[[—Ñ–∞–π–ª]]")
        if from_id == deal['seller']:
            receiver = deal['buyer']
        else:
            receiver = deal['seller']
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–ø–∏—Å–∫–∏", callback_data=json.dumps(
            {"action": "communicate", "deal_id": deal_id})))
        app.send_document(receiver, photo_id, caption=f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–¥–µ–ª–∫–µ #{deal_id}", reply_markup=kb)
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏",
                                          callback_data=json.dumps({"action": "exit_communicate"})))
        app.send_message(from_id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Ç–æ—Ä–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É —Å–¥–µ–ª–∫–∏", reply_markup=kb)


@app.message_handler(content_types=['video'])
def video(message):
    if message.chat.id < 0:
        return
    from_id = message.from_user.id
    db = Database(from_id, app)
    user = db.get_me()
    photo_id = message.video.file_id
    status = user['status']
    if status == "mailing_text":
        if from_id not in config.admins:
            return
        db.mailing_photo("VIDEO|" + photo_id)
        app.send_message(from_id, "–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kbs.admin_back)
    elif status == "ad_text":
        if from_id not in config.admins:
            return
        db.mailing_photo("VIDEO|" + photo_id)
        db.status("ad_text")
        app.send_message(from_id, "–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–Ω–æ–ø–∫–∏",
                         reply_markup=kbs.admin_back)
    elif status.startswith("communicate"):
        deal_id = int(status.split("__")[1])
        deal = db.get_deal(deal_id)
        if from_id != deal['seller'] and from_id != deal['buyer']:
            return
        if deal['status'] != "waiting_for_pay" and deal['status'] != "waiting_goods_transfer" or \
                deal['status'] == "arbitrage":
            return
        db.add_communicate_message(deal_id, "[[–≤–∏–¥–µ–æ]]")
        if from_id == deal['seller']:
            receiver = deal['buyer']
        else:
            receiver = deal['seller']
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–ø–∏—Å–∫–∏", callback_data=json.dumps(
            {"action": "communicate", "deal_id": deal_id})))
        app.send_video(receiver, photo_id, caption=f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–¥–µ–ª–∫–µ #{deal_id}", reply_markup=kb)
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏",
                                          callback_data=json.dumps({"action": "exit_communicate"})))
        app.send_message(from_id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Ç–æ—Ä–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É —Å–¥–µ–ª–∫–∏", reply_markup=kb)


@app.message_handler(content_types=['photo'])
def photo(message):
    if message.chat.id < 0:
        return
    from_id = message.from_user.id
    db = Database(from_id, app)
    user = db.get_me()
    photo_id = message.photo[-1].file_id
    status = user['status']
    if status == "mailing_text":
        if from_id not in config.admins:
            return
        db.mailing_photo("PHOTO|" + photo_id)
        app.send_message(from_id, "–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏", reply_markup=kbs.admin_back)
    elif status == "ad_text":
        if from_id not in config.admins:
            return
        db.mailing_photo("PHOTO|" + photo_id)
        db.status("ad_text")
        app.send_message(from_id, "–ê —Ç–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–π –∫–Ω–æ–ø–∫–∏",
                         reply_markup=kbs.admin_back)
    elif status.startswith("communicate"):
        deal_id = int(status.split("__")[1])
        deal = db.get_deal(deal_id)
        if from_id != deal['seller'] and from_id != deal['buyer']:
            return
        if deal['status'] != "waiting_for_pay" and deal['status'] != "waiting_goods_transfer" or \
                deal['status'] == "arbitrage":
            return
        db.add_communicate_message(deal_id, "[[—Ñ–æ—Ç–æ]]")
        if from_id == deal['seller']:
            receiver = deal['buyer']
        else:
            receiver = deal['seller']
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –≤ —Ä–µ–∂–∏–º –ø–µ—Ä–µ–ø–∏—Å–∫–∏", callback_data=json.dumps(
            {"action": "communicate", "deal_id": deal_id})))
        app.send_photo(receiver, photo_id, caption=f"–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–¥–µ–ª–∫–µ #{deal_id}", reply_markup=kb)
        kb = types.InlineKeyboardMarkup()
        kb.add(types.InlineKeyboardButton("–í—ã–π—Ç–∏ –∏–∑ —Ä–µ–∂–∏–º–∞ –ø–µ—Ä–µ–ø–∏—Å–∫–∏",
                                          callback_data=json.dumps({"action": "exit_communicate"})))
        app.send_message(from_id, "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤—Ç–æ—Ä–æ–º—É —É—á–∞—Å—Ç–Ω–∏–∫—É —Å–¥–µ–ª–∫–∏", reply_markup=kb)


print(f"https://t.me/{app.get_me().username}")
app.polling(True)
